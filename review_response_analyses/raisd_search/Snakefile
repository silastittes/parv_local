from collections import namedtuple

#search of raisd parameters to maximize overlap of sweeps between all populations

# to save a little effort, gonna break up the optimization
#assess best snp window size, THEN assess best merge window and outlier size.
#not ideal, but redoing all stages across all parameters is too much. 

#raisd parameters #window size must be even
snp_window = [10, 24, 50, 100, 200, 500]
maf = [0.0, 0.05]

#outlier parameters
outlier_quantile = [0.2, 0.1, 0.05, 0.01, 0.001] 

#sweep region parameters 
merge_window = [50000, 100000, 200000, 500000] 

#param tuples -- this is the bad place
Raisd = namedtuple("Raisd", "window maf")
raisd_p = [Raisd(s, m) for s in snp_window for m in maf]
Merge = namedtuple("Merge", "quantile merge")
merge_p = [Merge(q, r) for q in outlier_quantile for r in merge_window]

#dimensions
raisd_d = len(raisd_p)
merge_d = len(merge_p)

chroms = [
    "chr10--0--152435371",
    "chr1--0--308452471",
    "chr2--0--243675191",
    "chr3--0--238017767",
    "chr4--0--250330460",
    "chr5--0--226353449",
    "chr6--0--181357234",
    "chr7--0--185808916",
    "chr8--0--182411202",
    "chr9--0--163004744"
]

#pops = ["v5--Teo--random1_Palmar_Chico",
#        "v5--Teo--random2_Palmar_Chico",
#        "v5--LR--random1_Palmar_Chico",
#        "v5--LR--random2_Palmar_Chico"]

pops = [
    "v5--LR--Amatlan_de_Canas",
    "v5--LR--Crucero_Lagunitas",
    "v5--LR--Los_Guajes",
    "v5--LR--random1_Palmar_Chico",
    "v5--LR--random2_Palmar_Chico",
    "v5--LR--random",
    "v5--LR--San_Lorenzo",
    "v5--Teo--Amatlan_de_Canas",
    "v5--Teo--Crucero_Lagunitas",
    "v5--Teo--El_Rodeo",
    "v5--Teo--Los_Guajes",
    "v5--Teo--random1_Palmar_Chico",
    "v5--Teo--random2_Palmar_Chico",
    "v5--Teo--random",
    "v5--Teo--San_Lorenzo"
]



snpwindow_files = [f"snp_window/RAiSD_Report.{popu}_{x}_window{window}_maf{m}.txt" for popu in pops for window in snp_window for m in maf for x in chroms]
sim_files = [f"mushi/RAiSD_Report.{popu}_{x}_window{window}_maf{m}.txt" for popu in pops for window in snp_window for m in maf for x in chroms]
merge_files = [f"merged/RAiSD_Report.{popu}--{x}_window{window}_maf{m}_quantile{quantile}_merge{merge}.corrected_block_outliers" for popu in pops for window in snp_window for m in maf for quantile in outlier_quantile for merge in merge_window for x in chroms]
overlap_files = [f"overlaps/allpops_window{window}_maf{m}_quantile{quantile}_merge{merge}.txt" for window in snp_window for m in maf for quantile in outlier_quantile for merge in merge_window] 

rule all:
    input:
        snpwindow_files,
        sim_files,
        merge_files,
        overlap_files

rule raisd:
    input:
        "../../data/angsd_vcf/{population}--chr{x}--{start}--{end}.vcf.mop.gz"
    output:
        info = "snp_window/RAiSD_Info.{population}_chr{x}--{start}--{end}_window{window}_maf{m}.txt",
        reportt = "snp_window/RAiSD_Report.{population}_chr{x}--{start}--{end}_window{window}_maf{m}.txt"
    params:
        population = "{population}",
        window = "{window}",
        maf = "{m}",
        chrom = "chr{x}",
        name = "{population}_chr{x}--{start}--{end}_window{window}_maf{m}.txt",
        i1 = "RAiSD_Info.{population}_chr{x}--{start}--{end}_window{window}_maf{m}.txt",
        r1 = "RAiSD_Report.{population}_chr{x}--{start}--{end}_window{window}_maf{m}.txt"
    resources:
        mem_mb = 8000
    shell:
        """
        src/RAiSD -R -s -m {params.maf} -n {params.name} -I {input} -w {params.window} -f
        mv {params.i1} {output.info}
        mv {params.r1}.{params.chrom} {output.reportt} 
        """

rule var_correct:
    input:
        raisd="snp_window/RAiSD_Report.{population}_chr{x}--{start}--{end}_window{window}_maf{m}.txt",
        bed = "../../data/mop/{population}--chr{x}--{start}--{end}.bed"
    output:
        "snp_window/RAiSD_Report.{population}_chr{x}--{start}--{end}_window{window}_maf{m}.txt.corrected"
    params:
        c = "chr{x}"
    resources:
        mem_mb = 1000
    shell:
        """
        awk -v c={params.c} 'BEGIN{{OFS = "\\t"}}; NR > 1 {{print c, $2-1, $3, $0, $3-$2+1}}' {input.raisd} |\
        bedtools groupby -i - -g 1,2,3,4,5,6 -c 7,8,9,10,11 -o last,last,last,last,distinct |\
        bedtools intersect -a - -b {input.bed} |\
        awk 'BEGIN{{OFS = "\\t"}};{{print $0, $3-$2}}' |\
        bedtools groupby -i stdin -g 1,4,5,6 -c 7,8,9,10,11,12 -o distinct,distinct,distinct,distinct,distinct,sum |\
        awk 'BEGIN{{OFS="\\t"}}{{varnew = ($10/$9)*$5; print $1, $2, $3, $4, varnew, $6, $7, varnew*$6*$7}}' > {output}
        """


rule mushi_raisd:
    input:
        mspms = "../../data/mushi/{population}--mushi_ms.txt"
    output:
        reportt = "mushi/RAiSD_Report.{population}_chr{x}--{start}--{end}_window{window}_maf{m}.txt",
        info = "mushi/RAiSD_Info.{population}_chr{x}--{start}--{end}_window{window}_maf{m}.txt"
    params:
        popu = "{population}_chr{x}--{start}--{end}_window{window}_maf{m}",
        i1 = "RAiSD_Info.{population}_chr{x}--{start}--{end}_window{window}_maf{m}",
        r1 = "RAiSD_Report.{population}_chr{x}--{start}--{end}_window{window}_maf{m}",
        window = "{window}",
        maf = "{m}",
    resources:
        mem_mb = 4000
    shell:
        """
        src/RAiSD -I {input.mspms} -n {params.popu} -L 50000 -w {params.window} -m {params.maf} 
        mv {params.i1} {output.info}
        mv {params.r1} {output.reportt} 
        """

rule raisd_outliers:
    input:
        msprime = "mushi/RAiSD_Report.{popu}_chr{x}--{start}--{end}_window{window}_maf{m}.txt",
        raisd = "snp_window/RAiSD_Report.{popu}_chr{x}--{start}--{end}_window{window}_maf{m}.txt.corrected"
    output:
        "merged/RAiSD_Report.{popu}--chr{x}--{start}--{end}_window{window}_maf{m}_quantile{quantile}_merge{merge}.corrected_block_outliers"
    params:
         q = "{quantile}",
         merge = "{merge}"
    resources:
        mem_mb = 1000
    shell:
        """
        quantile=`grep -v "//" {input.msprime} | awk '{{print $2}}' | sort -rg | perl -e '$d={params.q};@l=<>;print $l[int($d*$#l)]'`
        cat {input.raisd} | awk -v quantile=$quantile '{{OFS = "\\t"}}; $8 > quantile {{print $1, $2-1, $2, $5, $6, $7, $8}}' | bedtools sort -i stdin  | bedtools merge -i stdin -d {params.merge} -c 7 -o max > {output}
        """

rule shared:
    input:
        expand("merged/RAiSD_Report.{popu}--{x}_window{{window}}_maf{{m}}_quantile{{quantile}}_merge{{merge}}.corrected_block_outliers", subsample = [1,2], ssp = ["LR", "Teo"], x = chroms, popu = pops)
    output:
        "overlaps/allpops_window{window}_maf{m}_quantile{quantile}_merge{merge}.txt"
    resources:
        mem_mb = 1000
    shell:
        """
        cat {input} |\
        bedtools sort -i stdin |\
        bedtools intersect -a stdin -b {input} -filenames -wb |\
        cut -f1-5 |\
        bedtools sort -i stdin |\
        bedtools merge -c 5 -o distinct -delim "," | awk '{{print $1 "\\t" $2 "\\t" $3 "\\t" $3-$2 "\\t" $4}}' > {output} 
        """
        
        #cat {input} |\
        #bedtools sort -i stdin |\
        #bedtools merge -i stdin |\ #bad
        #bedtools intersect -a stdin -b {input} -filenames -wb |\
        #cut -f1-4 |\ #dropping merge changes number of columns
        #bedtools sort -i stdin |\
        #bedtools merge -c 4 -o distinct -delim "," | awk '{{print $1 "\\t" $2 "\\t" $3 "\\t" $3-$2 "\\t" $4}}' > {output} 
