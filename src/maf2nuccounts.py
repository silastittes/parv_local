import gzip
import argparse
import random


parser = argparse.ArgumentParser(
    prog = "maf2counts",
    #description = "convert maf file produced by ANGSD to nucleotide count format used est-sfs. Output is bed position, major allele, minor allele, and the nucleotide table."
    description = "convert maf file produced by ANGSD to nucleotide count format used est-sfs. Output is bed positions, and the nucleotide table."
)

parser.add_argument('-f', '--maf_file', type=str, required = True,
            help='An maf file generated by angsdg. Assumes columns: chrom, pos, major, minor, ref, knownEM, pKEM, and nInd')

parser.add_argument('-t', '--type', type=str, required = True,
            help='The string, known or unknown depending on if the maf file columns are chrom, pos, major, minor, ref, knownEM, pKEM, and nInd OR chrom, pos, major, minor, ref, unknownEM, and nInd. ')

parser.add_argument('-m', '--minor_freq', type = float, required = True, 
            help = 'Minimum minor allele frequency cutoff to consider a site as bi-alleleic.')


args = parser.parse_args()

#convert maf file produced by beagle to nucleotide count format used est-sfs

def nuc_count(maf_line, file_type):
    nuc_dict = {'A':0, 'T':0, 'C':0, 'G':0}
    if file_type == "known":
        chrom, pos, major, minor, ref, knownEM, pKEM, nInd = maf_line.strip().split() 
        pos = int(pos)
        maf = float(knownEM)
    if file_type == "unknown":
        chrom, pos, major, minor, ref, unknownEM, nInd = maf_line.strip().split()
        pos = int(pos)
        maf = float(unknownEM)
    if ref == major or ref == minor:
        nInd = int(nInd)
        if maf > 0.5:
            maf = 1 - maf
        if maf >= args.minor_freq:
            nuccount = f"{minor.upper()},{major.upper()}" 
        else:
            nuccount = f"{major.upper()}"   
        
        return f"{chrom}\t{pos-1}\t{pos}\t{nuccount}"

        #old appraoch
        #scale = 1/(2*nInd)
        #scale = args.minor_freq
        #freq = maf+scale/2 -(maf+scale/2)%scale
        #maj_count = int((1-freq)*nInd*2)
        #min_count = int((freq)*nInd*2)
        #nuccount = ','.join([minor.upper()]*min([min_count, 1]) + [major.upper()]*min([maj_count,1]))
    #return f"{chrom}\t{pos-1}\t{pos}\t{major}\t{minor}\t{nuctable}"
    #return f"{chrom}\t{pos-1}\t{pos}\t{nuctable}"
 
         #if nInd == 1:
            #    nuc_dict[major.upper()] += 1
            #else:
            #    nuc_dict[major.upper()] += maj_count
            #    nuc_dict[minor.upper()] += min_count
            #nuctable = ','.join([f'{n}' for n in list(nuc_dict.values())]) 
        
#maf_string = "chr1    242     T       C       G       0.050024        2.295941e-13    10"
#print(nuc_count(maf_string))

def openfile(filename):
    if filename.endswith(".gz"):
        return gzip.open(filename, "rt")
    else:
        return open(filename, "r")

with openfile(args.maf_file) as f:
    first = f.readline()
    for line in f:
        print(nuc_count(line, file_type = args.type))
