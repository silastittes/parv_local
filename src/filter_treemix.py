import argparse
import gzip

#from parse_read import parse_read

prog = 'custom treemix filter',

parser = argparse.ArgumentParser(description="Converts raw treemix file generated by pipeline. Filters for desired allele frequency and fixes names.")

parser.add_argument("-m", "--freq", type=float, help="Minimum minor allele frequency.", required = True)

parser.add_argument("-c", "--missing", type=float, help="Maximum fraction of pops completely missing counts.", required = True)

parser.add_argument("-t", "--thin", type=int, help="Thin sites to be t markers apart.", required = True)

parser.add_argument("-f", "--input_file", type = str, help = "Name of the treemix maf file to parse.", required = True)

args = parser.parse_args()

def openfile(filename):
    if filename.endswith(".gz"):
        return gzip.open(filename, "rt")
    else:
        return open(filename, "r")

t = args.thin
with openfile(args.input_file) as f:
    header = f.readline().strip().split()
    header = [h.replace("data/angsd_treemix/v5--", "").replace(".mafscount.bed", "") for h in header]
    print('\t'.join(header))
    
    for line in f:
        counts = line.strip().split()
        ref = sum([int(c.split(",")[0]) for c in counts])
        alt = sum([int(c.split(",")[1]) for c in counts])
        missing = [1 if c == "0,0" else 0 for c in counts]
        missing_frac = sum(missing)/len(missing) 
            
        if ref+alt > 0 and missing_frac <= args.missing:
            freq = ref/(ref + alt)
            maf = min(freq, 1-freq)
            if maf >= args.freq and t < 1:
                print(line.strip())
                t = args.thin
        t -= 1
