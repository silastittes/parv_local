import argparse
import gzip

#from parse_read import parse_read

prog = 'fold maf parse',
parser = argparse.ArgumentParser(description="Based on a maf file generated by ANGSD, makes file of sites that are 0 or 4 fold and are of a particular mutation type.")

parser.add_argument("-n", "--nucs", type=str, help="Comma delimited pairs of nucleotides that represent the ancestral and derived nucleotides to filter by. Example: 'AT,GC' Will take sites that have 'A' or 'G' as the ancestral and 'T' or 'C' as the derived.", required = True)

parser.add_argument("-m", "--maf_file", type = str, 
            help = "Name of the ANGSD maf file to parse.", required = True)

parser.add_argument('-f', '--fold_file', type=str, 
            help="File that contains sites that are 0 or 4 fold, but probably not both! Format is chromosome TAB one indexed position",
            required = True)

args = parser.parse_args()


def openfile(filename):
    if filename.endswith(".gz"):
        return gzip.open(filename, "rt")
    else:
        return open(filename, "r")


#chromo  position        major   minor   ref     anc     unknownEM       nInd
#chr1    65      A       C       A       A       0.000006        3

def fold_dict(sites_file):
    sites_dict = {}
    with open(sites_file) as sites:
        for line in sites:
            ln = line.strip().split()
            sites_dict[f"{ln[0]}\t{ln[1]}"] = ""
    return sites_dict


def parse_maf(maf_file, fold_dict, nuc_string):

    #split the pairs of nucleotides into a list of paired lists
    nuc_pairs = [list(i) for i in nuc_string.upper().split(",")]

    with openfile(maf_file) as m:
        m.readline()
        for line in m:
            chrom, pos, major, minor, ref, anc, em, nIND = line.strip().split()
            if f"{chrom}\t{pos}" in fold_dict:
                if [anc.upper(), major.upper()] in nuc_pairs or [anc.upper(), minor.upper()] in nuc_pairs:
                    print(f"{chrom}\t{pos}")
 
#makes sites dictionary
sites = fold_dict(args.fold_file)

#run and print to stdout
parse_maf(args.maf_file, sites, args.nucs)
